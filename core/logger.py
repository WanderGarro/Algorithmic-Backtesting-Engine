import logging
from sys import executable
from os import path, makedirs
from logging.handlers import RotatingFileHandler

class Logger:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–µ–∫—Ç–µ.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É)
        –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, ERROR –∏ –¥—Ä.)
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        name (str): –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–æ–±—ã—á–Ω–æ __name__ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –º–æ–¥—É–ª—è)
        level (int, optional): –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é logging.INFO.
        file (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "logs/log.log".
        max_bytes (int, optional): –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö) –ø–µ—Ä–µ–¥ —Ä–æ—Ç–∞—Ü–∏–µ–π.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –ú–ë.
        backup_count (int, optional): –ö–æ–ª-–≤–æ –±—ç–∫–∞–ø-—Ñ–∞–π–ª–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3.

    –ü—Ä–∏–º–µ—Ä:
        >>> logger = Logger(__name__, level=logging.DEBUG)
        >>> logger.info('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        2023-10-01 12:00:00 - __main__ - INFO - –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    _LEVEL_ICONS = {
        'DEBUG': 'üîç',
        'INFO': '‚ÑπÔ∏è',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üí•'
    }

    _LEVEL_NAMES = {
        'DEBUG': '–û—Ç–ª–∞–¥–∫–∞',
        'INFO': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        'WARNING': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
        'ERROR': '–û—à–∏–±–∫–∞',
        'CRITICAL': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'
    }

    def __init__(self, name: str, level: int = logging.INFO, file: str = "logs/log.log",
                 max_bytes: int = 5 * 1024 * 1024, backup_count: int = 3):

        self.logger = logging.getLogger(name)
        self.logger.setLevel(level)

        self._setup_handlers(file, max_bytes, backup_count)

    def _setup_handlers(self, file: str, max_bytes: int, backup_count: int) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞ –∏ –∫–æ–Ω—Å–æ–ª–∏.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            file (str): –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
            max_bytes (int): –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ —Ä–æ—Ç–∞—Ü–∏–∏
            backup_count (int): –ö–æ–ª-–≤–æ –±—ç–∫–∞–ø-—Ñ–∞–π–ª–æ–≤
        """

        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–∞–ø–∫–∞ export —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º)
        export_path = path.abspath(path.dirname(executable))

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        makedirs(path.join(export_path, 'logs'), exist_ok=True)

        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                                      datefmt='%Y-%m-%d %H:%M:%S')

        # –ß–µ—Ä–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        file_handler = RotatingFileHandler(path.join(export_path, file), maxBytes=max_bytes, backupCount=backup_count, encoding='utf-8')
        file_handler.setFormatter(formatter)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)

        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

    def _format_message(self, level: str, message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π –∏ —É—Ä–æ–≤–Ω–µ–º.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            level (str): –£—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        icon = self._LEVEL_ICONS.get(level, '')
        level_name = self._LEVEL_NAMES.get(level, level)
        return f'{icon} {level_name}: {message}'

    def debug(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è DEBUG.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        self.logger.debug(self._format_message('DEBUG', message))

    def info(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è INFO.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        self.logger.info(self._format_message('INFO', message))

    def warning(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è WARNING.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        self.logger.warning(self._format_message('WARNING', message))

    def error(self, message: str, info: bool = False) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è ERROR.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            info (bool, optional): –ï—Å–ª–∏ True, –¥–æ–±–∞–≤–ª—è–µ—Ç traceback. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False
        """
        self.logger.error(self._format_message('ERROR', message), exc_info=info)

    def critical(self, message: str, info: bool = False) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è CRITICAL.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            info (bool, optional): –ï—Å–ª–∏ True, –¥–æ–±–∞–≤–ª—è–µ—Ç traceback. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False
        """
        self.logger.critical(self._format_message('CRITICAL', message), exc_info=info)