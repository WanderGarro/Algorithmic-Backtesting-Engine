from datetime import datetime
from core.logger import Logger
from core.portfolio import Portfolio
from typing import Dict, Optional, Tuple
from core.order_executor import OrderExecutor
from pandas import DataFrame, Series, to_datetime
from core.metrics_calculator import MetricsCalculator

class Backtester:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.

    –ö–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: –æ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    –¥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        initial_capital (float): –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        portfolio (Portfolio): –û–±—ä–µ–∫—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        order_executor (OrderExecutor): –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤
        metrics_calculator (MetricsCalculator): –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫
        logger (Logger): –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        results (Dict): –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞
        equity_curve (Series): –ö—Ä–∏–≤–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    """

    def __init__(self, initial_capital: float = 10000.0, commission: float = 0.001, slippage: float = 0.001):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            initial_capital (float): –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10,000)
            commission (float): –†–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.1%)
            slippage (float): –†–∞–∑–º–µ—Ä –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.1%)
        """
        self.initial_capital = initial_capital
        self.portfolio = Portfolio(initial_capital)
        self.order_executor = OrderExecutor(commission, slippage)
        self.metrics_calculator = MetricsCalculator()
        self.logger = Logger(__name__)

        self.results: Dict = {}
        self.equity_curve: Optional[Series] = None

        self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±—ç–∫—Ç–µ—Å—Ç–µ—Ä —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞–ø–∏—Ç–∞–ª–æ–º ${initial_capital:,.2f}")

    def run_backtest(self, data: DataFrame, strategy: type, **strategy_params) -> Dict:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            data (DataFrame): –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–ª–∂–µ–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:
                ['open', 'high', 'low', 'close', 'volume'] –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ 'symbol'
            strategy (type): –ö–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            **strategy_params: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞, –≤–∫–ª—é—á–∞—è –º–µ—Ç—Ä–∏–∫–∏, –∫—Ä–∏–≤—É—é –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
                metrics (Dict): –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                equity_curve (Series): –ö—Ä–∏–≤–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
                trades (List): –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                portfolio_history (List): –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—è
                final_portfolio_value (float): –ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                total_trades (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            ValueError: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞

        –ü—Ä–∏–º–µ—Ä:
        >>> # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∫–ª–∞—Å—Å–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        >>> import pandas as pd
        >>> from datetime import datetime
        >>> i=0
        >>> # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        >>> dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D')
        >>> backtest_data = pd.DataFrame({
        ...     'open': [100 + i * 0.1 for i in range(len(dates))],
        ...     'high': [101 + i * 0.1 for i in range(len(dates))],
        ...     'low': [99 + i * 0.1 for i in range(len(dates))],
        ...     'close': [100 + i * 0.1 for i in range(len(dates))],
        ...     'volume': [1000000] * len(dates),
        ...     'symbol': ['TEST'] * len(dates)
        ... }, index=dates)
        >>>
        >>> # –ö–ª–∞—Å—Å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        >>> class SimpleStrategy:
        ...     def __init__(self, window=10, threshold=0.5):
        ...         self.window = window
        ...         self.threshold = threshold
        ...
        ...     def generate_signals(self, signals_data):
        ...         backtest_signals = pd.Series(0, index=data.index)
        ...         rolling_mean = backtest_data['close'].rolling(self.window).mean()
        ...         signals_data[backtest_data['close'] > rolling_mean + self.threshold] = 1
        ...         signals_data[backtest_data['close'] < rolling_mean - self.threshold] = -1
        ...         return signals_data
        >>>
        >>> backtester = Backtester(initial_capital=10000)
        >>> results = backtester.run_backtest(data, SimpleStrategy, window=10, threshold=1.0)
        >>> print(f"–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${results['final_portfolio_value']:.2f}")
    """
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_columns = ['open', 'high', 'low', 'close', 'volume']
        if not all(col in data.columns for col in required_columns):
            error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö. –¢—Ä–µ–±—É—é—Ç—Å—è: {required_columns}"
            self.logger.error(error_msg)
            raise ValueError(error_msg)

        self.logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –±–∞—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        self.logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {data.index[0]} - {data.index[-1]}")

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.logger.info("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        try:
            strategy_instance = strategy(**strategy_params)
            signals = strategy_instance.generate_signals(data)
            self.logger.info(f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals[signals != 0])} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}", info=True)
            raise

        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self._simulate_trading(data, signals)

        # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results = self._calculate_results(data)

        self.logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return self.results

    def _simulate_trading(self, data: DataFrame, signals: Series):
        """
        –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
        –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –±–∞—Ä—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        –∏ –∏—Å–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ OrderExecutor.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            data (DataFrame) –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã
            signals (Series) —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ (1 - –ø–æ–∫—É–ø–∫–∞, -1 - –ø—Ä–æ–¥–∞–∂–∞, 0 - –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ)
        """
        symbol = data['symbol'].iloc[0] if 'symbol' in data.columns else 'UNKNOWN'

        self.logger.info(f"üíº –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol}")

        for i, (timestamp, row) in enumerate(data.iterrows()):
            current_price = row['close']
            signal = signals.iloc[i] if i < len(signals) else 0

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if i == 0:
                self.logger.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ä–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                continue

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ timestamp —è–≤–ª—è–µ—Ç—Å—è datetime
            if not isinstance(timestamp, datetime):
                timestamp = to_datetime(timestamp)

            # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            if signal != 0:
                action = "üü¢ –ü–æ–∫—É–ø–∫—É" if signal > 0 else "üî¥ –ü—Ä–æ–¥–∞–∂–∞"
                self.logger.debug(f"üéØ –°–∏–≥–Ω–∞–ª {action} –Ω–∞ –±–∞—Ä–µ {i}, —Ü–µ–Ω–∞: ${current_price:.2f}")

                self.order_executor.execute_signal(
                    portfolio=self.portfolio,
                    symbol=symbol,
                    signal=signal,
                    current_price=current_price,
                    timestamp=timestamp,
                    quantity=100,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞
                    reason=f"Bar {i}"
                )

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            current_prices = {symbol: current_price}
            portfolio_value = self.portfolio.update_portfolio_value(current_prices, timestamp)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10% –¥–∞–Ω–Ω—ã—Ö
            if i % max(1, len(data) // 10) == 0:
                progress = (i / len(data)) * 100
                self.logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%, –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${portfolio_value:,.2f}")

    def _calculate_results(self, data: DataFrame) -> Dict:
        """
        –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            data (DataFrame): –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict: –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ –≤–∫–ª—é—á–∞—è –º–µ—Ç—Ä–∏–∫–∏, –∫—Ä–∏–≤—É—é –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
        """
        self.logger.info("üìê –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

        # –°—Ç—Ä–æ–∏–º –∫—Ä–∏–≤—É—é –∫–∞–ø–∏—Ç–∞–ª–∞
        equity_curves = self.portfolio.get_equity_curve(data)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è –¥–ª—è –º–µ—Ç—Ä–∏–∫ - –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        self.equity_curve = equity_curves['total']

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
        trades = self.portfolio.trade_history

        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        metrics = self.metrics_calculator.calculate_all_metrics(self.equity_curve, trades)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = {
            'trades': trades,
            'metrics': metrics,
            'equity_curves': equity_curves,
            'equity_curve': self.equity_curve,
            'portfolio_history': self.portfolio.portfolio_history,
            'final_portfolio_value': self.equity_curve.iloc[-1] if len(self.equity_curve) > 0 else self.initial_capital,
            'total_trades': len(trades),
            'symbol': data['symbol'].iloc[0] if 'symbol' in data.columns else 'UNKNOWN',
            'initial_capital': self.initial_capital,
            'backtest_period': {'start': data.index[0], 'end': data.index[-1],
                                'days': (data.index[-1] - data.index[0]).days}
        }

        self.logger.info(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(metrics)} –º–µ—Ç—Ä–∏–∫, {len(trades)} —Å–¥–µ–ª–æ–∫")
        return results